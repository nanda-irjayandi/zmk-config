#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include <input/processors.dtsi>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/eyelash42.h"

/* this is for input processor if you want to modify the behaviour

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */
 
&mmv {
    // x-input-code = <INPUT_REL_X>;
    // y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <2>;
};


 // vestige from regular HRM implementation
//  &mt {
//     tapping-term-ms = <150>;
//     retro-tap;
// };

#define ZMK_POINTING_DEFAULT_MOVE_VAL 2400 
// #define ZMK_MOUSE_DEFAULT_SCRL_VAL 20
#define QUICK_TAP_MS 175

#define XXX &none
#define ___ &trans

// Home-Row Mods Definition
// I don't believe I would be having another keyboard in the future
// Probably make it modular if enough people are interested and with urob permission

#define KEYS_L      LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R      RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS      LH2 LH1 LH0 RH0 RH1 RH2
#define ENC_PRESS   LEC
#define JOYSTICK    J0 J1 J2 J3 J4

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <100>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// this is dual function that results in different keycode when different modifier is used
// SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
// SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMI, &kp BSLH)

SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp QMARK)          // ,?
SIMPLE_MORPH(sqt_morph, SFT, &kp SQT, &kp UNDER)              // '_
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp GT)                 // .>
SIMPLE_MORPH(slsh_morph, SFT, &kp FSLH, &kp LT)               // /<
SIMPLE_MORPH(min_morph, SFT, &kp MINUS, &kp DQT)              // -"

ZMK_TAP_DANCE(tap_bracket_left,
    tapping-term-ms = <200>;
    bindings = <&kp LPAR>, <&kp LBRC>, <&kp LT>, <&kp LBKT>;  // ( { < [
)

ZMK_TAP_DANCE(tap_bracket_right,
    tapping-term-ms = <200>;
    bindings = <&kp RPAR>, <&kp RBRC>, <&kp GT>, <&kp RBKT>;  // ) } > ]
)

// macOS move combo
ZMK_COMBO(combo_copy, &kp LG(LA(V)), LT3 LT1, 2)

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

ZMK_COMBO(combo_capsword, &caps_word, LH2 RH2, 0)

ZMK_TAP_DANCE(tap_shot_partial,
    tapping-term-ms = <200>;
    bindings = <&kp LG(LS(LC(N4)))>, <&kp LG(LS(N4))>; 
)

ZMK_TAP_DANCE(tap_shot_full,
    tapping-term-ms = <200>;
    bindings = <&kp LG(LS(LC(N3)))>, <&kp LG(LS(N3))>; 
)

// Doesn't work fluently and I prefer doing finger gymnastic 
// ZMK_TAP_DANCE(tap_meh_hyper,
//     tapping-term-ms = <200>;
//     bindings = <&sk LG(LS(LALT))>, <&sk LG(LS(LA(LCTRL)))>; 
// )

// system layer when nav and num layer is on
ZMK_CONDITIONAL_LAYER(sys, 1 2, 4)

// I am now using NAV layer for esc
// ZMK_COMBO(combo_esc, &kp ESC, LT5 RT5, 0)

/ {
    behaviors {
        rgb_encoder: rgb_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
        };
    };
};

// I am not using HRM combos tap only since I use combinations of modifiers for MEH and HYPR

// #include "mouse.dtsi"
// note that this should be written after MAKE_HRM, though I'll think about it later. The current implementation uses dt-bindings which i need to explore a little bit more
// for now the important bit is to make timeless homerow first

ZMK_LAYER(GRAPHITE,
    //╭─────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      &kp GRAVE    &kp B         &kp L         &kp D         &kp W         &kp Z                               &kp UP                &sqt_morph    &kp F         &kp O         &kp U         &kp J           &kp SEMI
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &kp EQUAL    &hml LCTRL N  &hml LALT R   &hml LGUI T   &hml LSHFT S  &kp G                     &kp LEFT    XXX     &kp RIGHT   &kp Y         &hmr RSHFT H  &hmr RGUI A   &hmr RALT E   &hmr RCTRL I    &comma_morph
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &tog 3       &kp Q         &kp X         &kp M         &kp C         &kp V              XXX              &kp DOWN              &kp K         &kp P         &dot_morph    &min_morph   &slsh_morph      &kp BSLH
    //╰─────────╯  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼───────────────────────────╯ ╰──────╯
                                              &kp TAB       &kp BSPC      &mo 2                                                      &mo 1         &kp SPC       &kp ENTER
    //                                         ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &inc_dec_kp UP DOWN
)

ZMK_LAYER(NUMBER,
    //╭─────────────────╮ ╭───────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        XXX               &kp KP_MULTIPLY &kp N7        &kp N8        &kp N9        &kp KP_PLUS                         &kp UP                &kp KP_PLUS   &kp N9        &kp N8        &kp N7        &kp KP_MULTIPLY   XXX
    //├─────────────────┤ ├───────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &tap_bracket_left   &hml LCTRL N0   &hml LALT N4  &hml LGUI N5  &hml LSHFT N6 &kp KP_EQUAL             &kp LEFT     XXX     &kp RIGHT   &kp KP_EQUAL  &hmr RSHFT N6 &hmr RGUI N5  &hmr RALT N4  &hmr RCTRL N0   &tap_bracket_right
    //├─────────────────┤ ├───────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        XXX               &kp KP_DIVIDE   &kp N1        &kp N2        &kp N3        &kp KP_MINUS       XXX              &kp DOWN              &kp KP_MINUS  &kp N3        &kp N2        &kp N1        &kp KP_DIVIDE     XXX
    //╰─────────────────╯ ╰───────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼───────────────────────────╯ ╰──────╯
                                                        &kp TAB       &kp BSPC      &tog 2                                                    &tog 1        &kp SPC       &kp ENTER
    //                                                  ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &inc_dec_kp UP DOWN
)

ZMK_LAYER(NAV,
    //╭──────╮ ╭───────────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────╮                             ╭─────────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      &kp ESC  &kp LG(Z)           &kp LG(X)         &kp LG(C)         &kp LG(V)         &kp LG(LS(Z))                               &mmv MOVE_UP                         XXX         &kp PG_UP     &kp UP        &kp HOME        XXX             XXX
    //├──────┤ ├───────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤           ╭─────────────────┼─────────────────┼─────────╮      ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &kp F15  &hml LCTRL C_BRI_UP &hml LALT C_PREV  &hml LGUI C_PP    &hml LSHFT C_NEXT &kp C_VOL_UP              &mmv MOVE_LEFT    &mkp LCLK         &mmv MOVE_RIGHT    XXX         &kp LEFT      &kp DOWN      &kp RIGHT       XXX             XXX
    //├──────┤ ├───────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╭──────╮ ╰─────────────────┼─────────────────┼─────────╯      ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &tog 1   &kp  C_BRI_DN       &tap_shot_full    &kp LG(LS(N5))    &tap_shot_partial &kp C_VOL_DN       XXX                      &mmv MOVE_DOWN                       XXX         &kp PG_DN     &kp LC(ENTER) &kp END         XXX             XXX
    //╰──────╯ ╰───────────────────┴─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╰──────╯                   ╰─────────────────╯                ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯ ╰──────╯
                                                     &kp TAB           &kp BSPC          &tog 2                                                                         &tog 1        &kp SPC       &kp ENTER
    //                                               ╰─────────────────┴─────────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯

    , &inc_dec_kp C_VOL_UP C_VOL_DN
)

ZMK_LAYER(FN,
    //╭─────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      &kp F1       &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                              &mmv MOVE_UP          &kp F7        &kp F8        &kp F9        &kp F10       &kp F11         &kp F12
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &kp MINUS    &hml LCTRL N1 &hml LALT N2  &hml LGUI N3  &hml LSHFT N4 &kp N5                    &kp LEFT    XXX     &kp RIGHT   &kp N6        &hmr RSHFT N7 &hmr RGUI N8  &hmr RALT N9  &hmr RCTRL N0   &kp EQUAL
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &tog 3       &sk LCTRL     &sk LALT      &sk LGUI      &sk LSHFT     XXX              &kp LEFT           &mmv MOVE_DOWN          XXX         &sk RSHFT     &sk RGUI      &sk RALT      &sk RCTRL       &tog 3
    //╰─────────╯  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯ ╰──────╯
                                               &kp TAB       &kp BSPC      &kp TAB                                                   &kp ENTER     &kp SPC       &kp ENTER
    //                                         ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &inc_dec_kp PG_UP PG_DN
)

ZMK_LAYER(SYSTEM,
    //╭──────╮       ╭─────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────╮                              ╭──────────────────╮                     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        XXX            XXX         &rgb_ug RGB_SAD   &rgb_ug RGB_SPI   &rgb_ug RGB_SAI     XXX                                        &bt BT_SEL 0                             &out OUT_BLE    XXX           XXX           XXX           XXX             XXX
    //├──────┤       ├─────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤           ╭──────────────────┼──────────────────┼──────────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        XXX            XXX         &rgb_ug RGB_EFR     XXX             &rgb_ug RGB_EFF     XXX                     &bt BT_SEL 3       &bt BT_CLR_ALL     &bt BT_SEL 1            XXX           XXX           XXX           XXX           XXX             XXX
    //├──────┤       ├─────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╭──────╮ ╰──────────────────┼──────────────────┼──────────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        XXX            XXX         &rgb_ug RGB_HUD   &rgb_ug RGB_SPD   &rgb_ug RGB_HUI     XXX            &rgb_ug RGB_TOG             &bt BT_SEL 2                             &out OUT_USB    XXX           XXX           XXX           XXX             XXX
    //╰──────╯       ╰─────────────┴─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╰──────╯                    ╰──────────────────╯                     ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ ╰──────╯
                                                       XXX               XXX             &tog 4                                                                                &tog 4          XXX           XXX
    //                                               ╰─────────────────┴─────────────────┴─────────────╯                                                                       ╰─────────────┴─────────────┴─────────────╯

    , &rgb_encoder
)


// old keymap stub 
// {
//     behaviors {
//         // td0: td0 {
//         //     compatible = "zmk,behavior-tap-dance";
//         //     display-name = "Shift/Caps Lock Tap Dance";
//         //     #binding-cells = <0>;
//         //     bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
//         // };
//     };

//     // Very likely I will want to change the behaviour of the encoder independent from the layer

//     rgb_encoder: rgb_encoder {
//         compatible = "zmk,behavior-sensor-rotate";
//         #sensor-binding-cells = <0>;
//         bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
//     };

//     scroll_encoder: scroll_encoder {
//         compatible = "zmk,behavior-sensor-rotate";
//         #sensor-binding-cells = <0>;
//         bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
//         tap-ms = <30>;
//     };

//     keymap {
//         compatible = "zmk,keymap";

// // With &lt 3 BSPC I will leave it like that, even though it's causing issue when holding it, you just need to discpline using modifier key or VIM bindings

//         default_layer {
//             display-name = "GALLIUM";
//             bindings = <
// XXX &kp B &kp L  &kp D  &kp C  &kp V                              &kp UP                &kp J  &kp Y  &kp O      &kp U    &kp COMMA     &kp BSPC
// XXX &kp N &kp R  &kp T  &kp S  &kp G                    &kp LEFT  &kp ENTER  &kp RIGHT  &kp P  &kp H  &kp A      &kp E    &kp I  &kp SQT
// XXX &kp X &kp Q  &kp M  &kp W  &kp Z       &kp SPACE              &kp DOWN              &kp K  &kp F  &kp SQT  &kp SEMI  &kp DOT  &kp ESC
//                     &kp LGUI  &lt 3 BSPC &lt 3 TAB                                        &lt 2 ENTER &lt 3 SPACE &caps_word 
//             >;
//             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
//         };

//         lower_layer {
//             display-name = "NUMBER";
//             bindings = <
// &trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                        &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
// &trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                           &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
// &trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
//                                          &trans        &trans        &trans                                                                         &kp INS          &kp DEL          &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };

//         raise_layer {
//             display-name = "SYMBOL";
//             bindings = <
// &trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                           &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
// &trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
// &trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5  &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
//                                     &trans     &trans     &kp SPACE                                                            &kp RET    &trans     &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };

//         layer_3 {
//             display-name = "Fn";
//             bindings = <
// &kp F1      &kp F2      &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11 &kp F12
// &trans  &trans      &mkp LCLK   &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  XXX
// &trans  &sys_reset  &trans      &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
//                                 &trans      &trans      &trans                                                                   &trans       &trans     &trans
//             >;
//             sensor-bindings = <&scroll_encoder>;
//         };
//     };
// };
