#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#include <input/processors.dtsi>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/eyelash42.h"

&sl {
    release-after-ms = <0>;
    ignore-modifiers;
};

&sk {
  release-after-ms = <3000>;
  // quick-release;
  // display-name = "SK ON";
};

#define QUICK_TAP_MS 175

#define XXX &none
#define ___ &trans
#define MAC_CHAR &kp LC(LG(SPACE))

// Home-Row Mods Definition
// I don't believe I would be having another keyboard in the future
// Probably make it modular if enough people are interested and with urob permission

#define KEYS_L      LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R      RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS      LH2 LH1 LH0 RH0 RH1 RH2
#define ENC_PRESS   LEC
#define JOYSTICK    JS0 JS1 JS2 JS3 JS4

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <100>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

#include "mouse.dtsi"

ZMK_HOLD_TAP(hold_layer, bindings = <&mo>, <&kp>; 
                flavor = "balanced"; 
                tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// this is dual function that results in different keycode when different modifier is used
// SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
// SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMI, &kp BSLH)

// TODO scroll wheel for encoder with morphing
/ {
	behaviors {
		rgb_encoder: rgb_encoder {
			compatible = "zmk,behavior-sensor-rotate";
			#sensor-binding-cells = <0>;
			bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
		};

    arrow_encoder: arrow_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      #sensor-binding-cells = <0>;
      bindings = <&enc_cw_morph_arrow>, <&enc_ccw_morph_arrow>;
    };

    enc_cw_morph_arrow: enc_cw_morph_arrow {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp UP>, <&kp RIGHT>;
      mods = <(MOD_RCTL|MOD_LCTL)>;
    };

    enc_ccw_morph_arrow: enc_ccw_morph_arrow {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOWN>, <&kp LEFT>;
      mods = <(MOD_RCTL|MOD_LCTL)>;
    };

    scroll_encoder: scroll_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      #sensor-binding-cells = <0>;
      bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
      tap-ms = <30>;
    };

    enc_cw_morph_scroll: enc_cw_morph_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&msc SCRL_UP>, <&msc SCRL_RIGHT>;
      mods = <(MOD_RCTL|MOD_LCTL)>;
    };

    enc_ccw_morph_scroll: enc_ccw_morph_scroll {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&msc SCRL_DOWN>, <&msc SCRL_LEFT>;
      mods = <(MOD_RCTL|MOD_LCTL)>;
    };
		
    caps_word: caps_word {
      compatible = "zmk,behavior-caps-word";
      #binding-cells = <0>;
      continue-list = <BACKSPACE MINUS UNDER PERIOD SLASH PERIOD>;
      // ignore-modifiers; 
    };
	};
	
	// kscan: kscan {
	// 	wakeup-source;
	// };
	
	// side_band_behavior_triggers: side_band_behavior_triggers {
	// 	compatible = "zmk,kscan-sideband-behaviors";
	// 	wakeup-source;
	// 	kscan = <&kscan>;
	// 	soft_on {
	// 		column = <12>;
	// 		row = <4>;
	// 		bindings = <&hw_soft_on>;
	// 	};
	// };
	
	// chosen {
	// 	zmk,kscan = &side_band_behavior_triggers;
	// };

  // wakeup_scan: wakeup_scan {
  //     compatible = "zmk,gpio-key-wakeup-trigger";
  //     trigger = <&soft_off_gpio_key>;
  //     wakeup-source;
  //     extra-gpios = <&gpio0 23 GPIO_ACTIVE_HIGH>;
  // };

  // soft_off_wakers {
  //     compatible = "zmk,soft-off-wakeup-sources";
  //     wakeup-sources = <&wakeup_scan>;
  // };

	// &encoder {
	//     compatible = "zmk,behavior-encoder";
	//     sensor-bindings = <&encoder_toggle 0 &rot_kp VOL_UP VOL_DOWN>,
	//                       <&encoder_toggle 1 &rot_kp PG_UP PG_DN>;
	// };
};

ZMK_COMBO(combo_excl, &kp EXCL, LT1 LT2 LT3, 0)
ZMK_COMBO(combo_amps, &kp AMPS, RT1 RT2 RT3, 0)
ZMK_COMBO(combo_par_left, &morph_par_left, LT1 LT2, 0)
ZMK_COMBO(combo_par_rght, &morph_par_rght, RT1 RT2, 0)

SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp QMARK)          // ,?
SIMPLE_MORPH(sqt_morph, SFT, &kp SQT, &kp UNDER)              // '_
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp AT)          // .@
SIMPLE_MORPH(slsh_morph, SFT, &kp FSLH, &kp PRCNT)        // /%
SIMPLE_MORPH(min_morph, SFT, &kp MINUS, &kp DQT)              // -"
SIMPLE_MORPH(morph_par_left, SFT, &tap_par_left_one, &tap_par_left_two)
SIMPLE_MORPH(morph_par_rght, SFT, &tap_par_rght_one, &tap_par_rght_two)
// for NUMBER layer
SIMPLE_MORPH(eql_morph, SFT, &kp KP_EQUAL, &kp KP_DOT)        // =.

SIMPLE_MORPH(bspc_morph, SFT, &kp BSPC, &kp DELETE)           // BSPC DEL

ZMK_TAP_DANCE(tap_par_left_one,
    tapping-term-ms = <220>;
    bindings = <&kp LPAR>, <&kp LBKT>;  // ( [
)

ZMK_TAP_DANCE(tap_par_left_two,
    tapping-term-ms = <220>;
    bindings = <&kp LBRC>, <&kp LT>;    // { < 
)

ZMK_TAP_DANCE(tap_par_rght_one,
    tapping-term-ms = <220>;
    bindings = <&kp RPAR>, <&kp RBKT>;  // ) ]
)

ZMK_TAP_DANCE(tap_par_rght_two,
    tapping-term-ms = <220>;
    bindings = <&kp RBRC>, <&kp GT>;  // } >
)

// macOS move combo
ZMK_COMBO(combo_move, &kp LG(LA(V)), RT3 RT1, 2)

// VIM navigation combo
ZMK_COMBO(combo_vim_jump_left, &kp LBRC, RT2 RM1, 2)
ZMK_COMBO(combo_vim_jump_right, &kp RBRC, RT2 RM3, 2)

ZMK_COMBO(combo_vim_word_left, &kp B, RM2 RM1, 2)
ZMK_COMBO(combo_vim_word_right, &kp E, RM2 RM3, 2)

// Doesn't work
// ZMK_COMBO(combo_meh_left, &sk LC(LA(LSHFT)), LM4 LM3 LM1, 2)
// ZMK_COMBO(combo_meh_right, &sk RC(RA(RSHFT)), RM4 RM3 RM1, 2)

// ZMK_COMBO(combo_hypr_left, &sk LG(LC(LA(LSHFT))), LM4 LM3 LM2 LM1, 2)
// ZMK_COMBO(combo_hypr_right, &sk RG(RC(RA(RSHFT))), RM4 RM3 RM2 RM1, 2)

ZMK_COMBO(combo_capsword, &caps_word, LH1 RH1, 0, 100)
ZMK_COMBO(combo_menu, &kp LG(LS(FSLH)), RB1 RB3, 2)
ZMK_COMBO(combo_esc, &kp ESC, LH0 RH0, 0 1 2, 100)
ZMK_COMBO(combo_undo, &kp LG(Z), LB1 LB2, 0, 100)
ZMK_COMBO(combo_redo, &kp LG(LS(Z)), RB1 RB2, 0, 100)
ZMK_COMBO(combo_sys, &tog 4, LB5 RB5, 0, 100)
ZMK_COMBO(combo_home, &to 0, LH2 RH2, 1 2 3, 100)

ZMK_TAP_DANCE(tap_shot_partial,
    tapping-term-ms = <200>;
    bindings = <&kp LG(LS(LC(N4)))>, <&kp LG(LS(N4))>; 
)

ZMK_TAP_DANCE(tap_shot_full,
    tapping-term-ms = <200>;
    bindings = <&kp LG(LS(LC(N3)))>, <&kp LG(LS(N3))>; 
)

#define L_FN &hold_layer 3 GRAVE
#define R_FN &hold_layer 3 SEMI
#define LAYER_NUM &hold_layer 1 SPC
#define LAYER_NAV &layer_nav 2 0
ZMK_HOLD_TAP(layer_nav, bindings = <&mo>, <&bspc_morph>;
                flavor = "balanced";
                tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
                
// I am not using HRM combos tap only since I use combinations of modifiers for MEH and HYPR

ZMK_LAYER(GRAPHITE,
    //╭─────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      L_FN         &kp B         &kp L         &kp D         &kp W         &kp Z                               &kp UP                &sqt_morph    &kp F         &kp O         &kp U         &kp J           R_FN
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &kp EQUAL    &hml LCTRL N  &hml LALT R   &hml LGUI T   &hml LSHFT S  &kp G                     &kp LEFT    XXX     &kp RIGHT   &kp Y         &hmr RSHFT H  &hmr RGUI A   &hmr RALT E   &hmr RCTRL I    &comma_morph
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      MAC_CHAR     &kp Q         &kp X         &kp M         &kp C         &kp V              XXX              &kp DOWN              &kp K         &kp P         &dot_morph    &min_morph    &slsh_morph     &kp BSLH
    //╰─────────╯  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼───────────────────────────╯ ╰──────╯
                                               &tog 2         LAYER_NAV    &kp TAB                                                   &kp ENTER      LAYER_NUM    &tog 1
    //                                         ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &scroll_encoder
)

ZMK_LAYER(NUMBER,
    //╭──────────╮ ╭───────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        ___        &kp KP_MULTIPLY &kp N7        &kp N8        &kp N9        &kp KP_PLUS                         &kp UP                &kp KP_MULTIPLY &kp AMPS    &kp STAR      &kp SQT       &kp KP_PLUS       ___ 
    //├──────────┤ ├───────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        ___        &hml LCTRL N0   &hml LALT N4  &hml LGUI N5  &hml LSHFT N6 &eql_morph                &kp LEFT     XXX     &kp RIGHT  &eql_morph    &hmr RSHFT DLLR &hmr RGUI PRCNT  &hmr RALT CARET  &hmr RCTRL GRAVE  ___ 
    //├──────────┤ ├───────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        ___        &kp KP_DIVIDE   &kp N1        &kp N2        &kp N3        &kp KP_MINUS       XXX              &kp DOWN              &kp KP_DIVIDE &kp EXCL      &kp AT        &kp HASH      &kp KP_MINUS      ___ 
    //╰──────────╯ ╰───────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼───────────────────────────╯ ╰──────╯
                                                 &tog 2       LAYER_NAV   &kp TAB                                                      &kp ENTER      LAYER_NUM       &tog 1
    //                                           ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &arrow_encoder
)

ZMK_LAYER(NAV,
    //╭──────╮ ╭───────────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────╮                             ╭─────────────────╮                ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
       ___      XXX                &kp LG(X)         &kp LG(C)         &kp LG(V)         XXX                                         MS_U                         XXX         &kp HOME      &kp UP        &kp PG_UP      XXX             XXX
    //├──────┤ ├───────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤           ╭─────────────────┼─────────────────┼─────────╮      ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
       ___     &hml LCTRL C_BRI_UP &hml LALT C_PREV  &hml LGUI C_PP    &hml LSHFT C_NEXT &kp C_VOL_UP              MS_L    MS_HC         MS_R    XXX         &kp LEFT      &kp DOWN      &kp RIGHT      XXX             XXX
    //├──────┤ ├───────────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╭──────╮ ╰─────────────────┼─────────────────┼─────────╯      ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
       ___     &kp  C_BRI_DN       &tap_shot_full    &kp LG(LS(N5))    &tap_shot_partial &kp C_VOL_DN       &kp F15                  MS_D                      XXX         &kp END       &kp LC(ENTER) &kp PG_DN      XXX             XXX
    //╰──────╯ ╰───────────────────┴─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╰──────╯                   ╰─────────────────╯                ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯ ╰──────╯
                                                     &tog 2           LAYER_NAV          &kp TAB                                                                        &kp ENTER      LAYER_NUM    &tog 1
    //                                               ╰─────────────────┴─────────────────┴─────────────╯                                                                ╰─────────────┴─────────────┴─────────────╯

    , &arrow_encoder
)

// Press XXX to cancel the sticky key
ZMK_LAYER(FN,
    //╭─────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                     ╭─────────╮           ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      &kp F1       &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                              &mmv MOVE_UP          &kp F7        &kp F8        &kp F9        &kp F10       &kp F11         &kp F12
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤           ╭─────────┼─────────┼─────────╮ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &to 3        &sk LCTRL     &sk LALT      &sk LGUI      &sk LSHFT      XXX                      &kp LEFT    XXX     &kp RIGHT    XXX          &sk RSHFT     &sk RGUI      &sk RALT      &sk RCTRL       &to 3
    //├─────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ╭──────╮ ╰─────────┼─────────┼─────────╯ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
      &kp MINUS    &kp N1        &kp N2        &kp N3        &kp N4        &kp N5           &kp LEFT           &mmv MOVE_DOWN        &kp N6        &kp N7        &kp N8        &kp N9        &kp N0          &kp EQUAL
    //╰─────────╯  ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤  ╰──────╯           ╰─────────╯           ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯ ╰──────╯
                                               &tog 2         LAYER_NAV    &kp TAB                                                   &kp ENTER      LAYER_NUM    &tog 1
    //                                         ╰─────────────┴─────────────┴─────────────╯                                           ╰─────────────┴─────────────┴─────────────╯

    , &arrow_encoder
)

ZMK_LAYER(SYSTEM,
    //╭──────╮       ╭─────────────┬─────────────────┬─────────────────┬─────────────────┬─────────────╮                              ╭──────────────────╮                     ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
      &soft_off        XXX         &rgb_ug RGB_SAD   &rgb_ug RGB_SPI   &rgb_ug RGB_SAI     XXX                                        &bt BT_SEL 0                             &out OUT_BLE    XXX           XXX           XXX           XXX           &soft_off
    //├──────┤       ├─────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤           ╭──────────────────┼──────────────────┼──────────────────╮  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        XXX            XXX         &rgb_ug RGB_EFR     XXX             &rgb_ug RGB_EFF     XXX                     &bt BT_SEL 3       &bt BT_CLR_ALL     &bt BT_SEL 1            XXX           XXX           XXX           XXX           XXX             XXX
    //├──────┤       ├─────────────┼─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╭──────╮ ╰──────────────────┼──────────────────┼──────────────────╯  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        XXX            XXX         &rgb_ug RGB_HUD   &rgb_ug RGB_SPD   &rgb_ug RGB_HUI     XXX            &rgb_ug RGB_TOG             &bt BT_SEL 2                             &out OUT_USB    XXX           XXX           XXX           XXX             XXX
    //╰──────╯       ╰─────────────┴─────────────────┼─────────────────┼─────────────────┼─────────────┤  ╰──────╯                    ╰──────────────────╯                     ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ ╰──────╯
                                                       XXX               XXX             &to 0                                                                                 &to 0          XXX           XXX
    //                                               ╰─────────────────┴─────────────────┴─────────────╯                                                                       ╰─────────────┴─────────────┴─────────────╯

    , &rgb_encoder
)