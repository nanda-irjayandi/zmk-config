// I am not using HRM combos as I would like to reserve its dedicated use and maintain speedy response 

#include <behaviors.dtsi>

#include "zmk-helpers/helper.h"

#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

/* Combos */
ZMK_COMBO(combo_semi,               &kp SEMI,           RT1 RT2 RT3, 0)
ZMK_COMBO(combo_at,               &morph_at,          LT1 LT2 LT3, 0)
// ZMK_COMBO(combo_bral,               &morph_bral,        LT1 LT2, 0)
// ZMK_COMBO(combo_brar,               &morph_brar,        RT1 RT2, 0)

// Typing Combos
ZMK_COMBO(combo_capsword,           &caps_word,         LH1 RH1, 0, 100)
ZMK_COMBO(combo_esc,                &kp ESC,            LH0 RH0, 0 1 2, 100)
ZMK_COMBO(combo_undo,               &kp LG(Z),          LB1 LB2, 0, 100)
ZMK_COMBO(combo_redo,               &kp LG(LS(Z)),      RB1 RB2, 0, 100)

// macOS move combo 
ZMK_COMBO(combo_move,               &kp LG(LA(V)),      LT3 LT1, 2)

// VIM navigation combo 
ZMK_COMBO(combo_vim_jump_left,      &kp LBRC,           RT2 RM1, 2)
ZMK_COMBO(combo_vim_jump_right,     &kp RBRC,           RT2 RM3, 2)

ZMK_COMBO(combo_vim_word_left,      &kp B,              RM2 RM1, 2)
ZMK_COMBO(combo_vim_word_right,     &kp E,              RM2 RM3, 2)

// Layer Navigation Combo   
ZMK_COMBO(combo_sys,                &tog 4,             LB5 RB5, 0, 100)
ZMK_COMBO(combo_home,               &to 0,              LH2 RH2, 1 2 3, 100)
ZMK_COMBO(combo_menu,               &kp LG(LS(FSLH)),   RB1 RB3, 2)

/* Simple Morph */
// Graphite Specific Morph
SIMPLE_MORPH(morph_comma,   SFT, &kp COMMA, &kp QMARK)          // ,?
SIMPLE_MORPH(morph_sqt,     SFT, &kp SQT, &kp UNDER)              // '_
SIMPLE_MORPH(morph_dot,     SFT, &kp DOT, &kp EXCL)          // .!
SIMPLE_MORPH(morph_dot,     SFT, &kp DOT, &kp EXCL)          // .!
SIMPLE_MORPH(morph_fslh,    SFT, &kp FSLH, &kp PRCNT)        // /%
SIMPLE_MORPH(morph_min,     SFT, &kp MINUS, &kp DQT)              // -"

// NUMBER layer morph
SIMPLE_MORPH(morph_eql,     SFT, &kp KP_EQUAL, &kp KP_DOT)        // =.

// Backspace/Delete Morph
SIMPLE_MORPH(morph_bspc,    SFT, &kp BSPC, &kp DELETE)           // BSPC DEL

SIMPLE_MORPH(morph_at,    SFT, &kp AT, &kp AMPS)
SIMPLE_MORPH(morph_hash,    SFT, &kp HASH, &kp DLLR)
// SIMPLE_MORPH(morph_semi,    SFT, &kp SEMI, &kp COLON) 

// Bracket Morph
// combine shift modifier and tap-dance to change the bracket form transmitted
SIMPLE_MORPH(morph_bral,    SFT, &tap_bral_one, &tap_bral_two)
SIMPLE_MORPH(morph_brar,    SFT, &tap_brar_one, &tap_brar_two)

/* Tap Dance */
// Bracket Tap Dance 
ZMK_TAP_DANCE(tap_bral_one,     tapping-term-ms = <280>; bindings = <&kp LPAR>, <&kp LBKT>;) // ( [
ZMK_TAP_DANCE(tap_bral_two,     tapping-term-ms = <280>; bindings = <&kp LBRC>, <&kp LT>;) // { < 

ZMK_TAP_DANCE(tap_brar_one,     tapping-term-ms = <280>; bindings = <&kp RPAR>, <&kp RBKT>;) // ) ]
ZMK_TAP_DANCE(tap_brar_two,     tapping-term-ms = <280>; bindings = <&kp RBRC>, <&kp GT>;) // } >

// Screenshot Tap Dance
ZMK_TAP_DANCE(tap_shot_part,    tapping-term-ms = <200>; bindings = <&kp LG(LS(LC(N4)))>, <&kp LG(LS(N4))>;)
ZMK_TAP_DANCE(tap_shot_full,    tapping-term-ms = <200>; bindings = <&kp LG(LS(LC(N3)))>, <&kp LG(LS(N3))>;)

ZMK_TAP_DANCE(tap_copy_cut,     tapping-term-ms = <200>; bindings = <&kp LG(C)>, <&kp LG(X)>;)
ZMK_TAP_DANCE(tap_paste_move,   tapping-term-ms = <200>; bindings = <&kp LG(V)>, <&kp LG(LA(V))>;)
// Doesn't work
// ZMK_COMBO(combo_meh_left, &sk LC(LA(LSHFT)), LM4 LM3 LM1, 2)
// ZMK_COMBO(combo_meh_right, &sk RC(RA(RSHFT)), RM4 RM3 RM1, 2)

// ZMK_COMBO(combo_hypr_left, &sk LG(LC(LA(LSHFT))), LM4 LM3 LM2 LM1, 2)
// ZMK_COMBO(combo_hypr_right, &sk RG(RC(RA(RSHFT))), RM4 RM3 RM2 RM1, 2)

// alias list
#define MAC_CHAR &kp LC(LG(SPACE))
#define M_COMM &morph_comma
#define M_FSLH &morph_fslh
#define M_DOT &morph_dot
#define M_MIN &morph_min
#define M_SQT &morph_sqt
#define M_EQL &morph_eql
#define M_BSPC &morph_bspc
#define M_BRAL &morph_bral
#define M_BRAR &morph_brar
#define M_HASH &morph_hash
#define T_COPY &tap_copy_cut
#define T_PASTE &tap_paste_move
#define MAC_ALL &kp LG(A)

/* Templates */

// this is dual function that results in different keycode when different modifier is used
// SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
// SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMI, &kp BSLH)